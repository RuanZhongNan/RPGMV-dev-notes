(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{665:function(d,i,n){"use strict";n.r(i);var a=n(8),t=Object(a.a)({},(function(){var d=this.$createElement,i=this._self._c||d;return i("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[i("h2",{attrs:{id:"对addchild-方法的理解以及与addwindow-方法的联系-addwindow-方法的必要性说明"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#对addchild-方法的理解以及与addwindow-方法的联系-addwindow-方法的必要性说明"}},[this._v("#")]),this._v(" 对addChild()方法的理解以及与addWindow()方法的联系，addWindow()方法的必要性说明")]),this._v(" "),i("p",[this._v("在Stage基类和Window基类中，他们都是对PIXI.Container类的实现，在PIXI.Container中，都具有addChild()方法。所以绝大部分的用Stage类和Window类作为超类的子类都可以使用addChild()方法。\n事实上，addWindow()方法其本质也是实现addChild()方法。因此，我们可以尝试全部使用addChild方法来代替使用addWindow方法，减少使用新的方法，减少记忆。源码如下：\nScene_Base.prototype.addWindow = function(window) {\nthis._windowLayer.addChild(window);\n};")]),this._v(" "),i("p",[this._v("但是我们最好还是使用addWindow方法。因为addWindow方法是建立在Scene_Base类的_windowLayer成员变量，只要控制了_windowLayer变量，就可以对一个场景内部的全体窗口进行统一的控制了。这就是addWindow的必要性。")])])}),[],!1,null,null,null);i.default=t.exports}}]);